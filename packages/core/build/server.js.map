{"version":3,"sources":["../src/server.js"],"names":["paramTypeErrors","functionName","types","returnType","join","getConstructorParamType","SynchemyServer","args","sockets","onMessageCallback","onSocketConnectionCallback","onSocketDisconnectionCallback","Error","app","server","port","options","config","ws","WebSocket","Server","on","socket","socketId","push","data","parsedData","JSON","parse","then","message","messageId","send","stringify","_","otherSockets","Object","keys","func","Promise","resolve","reject","newMessage","Array","isArray","forEach","values"],"mappings":"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","sourcesContent":["import WebSocket from 'ws'\nimport { v4 as uuid } from 'uuid'\n\nconst paramTypeErrors = (functionName, types, returnType) => {\n  return `${functionName} takes these param types: (${types.join(', ')}) => ${returnType}.`\n}\n\nconst getConstructorParamType = () => {\n  return 'oneOf(' +\n    '{ server: NodeHTTPServer, app?: ExpressApp, port?: Number }, ' +\n    '{ port: Number }' +\n  ')'\n}\n\nclass SynchemyServer {\n  sockets = []\n  #messagingManager = {\n    sockets: {},\n    onMessageCallback: null,\n    onSocketConnectionCallback: null,\n    onSocketDisconnectionCallback: null\n  }\n\n  constructor (args) {\n    if (!args) {\n      throw new Error(paramTypeErrors('SynchemyServer constructor', [getConstructorParamType()], 'void'))\n    }\n\n    const { app, server, port, options = {} } = args\n    if (!server && !port) {\n      throw new Error(paramTypeErrors('SynchemyServer constructor', [getConstructorParamType()], 'void'))\n    }\n\n    if (app && typeof app !== 'function') {\n      throw new Error('The app property needs to be an Expressjs app.')\n    }\n\n    const config = port ? { port } : { server }\n    const ws = new WebSocket.Server({\n      ...config,\n      ...options\n    })\n\n    if (server && app) {\n      server.on('request', app)\n    }\n\n    ws.on('connection', socket => {\n      const socketId = uuid()\n      this.#messagingManager.sockets[socketId] = socket\n      this.sockets.push(socketId)\n\n      socket.on('message', data => {\n        const parsedData = JSON.parse(data)\n        if (this.#messagingManager.onMessageCallback) {\n          this.#messagingManager.onMessageCallback(parsedData, socketId).then(({ message, messageId }) => {\n            socket.send(JSON.stringify({\n              message, messageId\n            }))\n          })\n        }\n      })\n\n      socket.on('close', () => {\n        if (this.#messagingManager) {\n          const { [socketId]: _, ...otherSockets } = this.#messagingManager.sockets\n          this.#messagingManager.sockets = otherSockets\n          this.sockets = Object.keys(otherSockets)\n          if (this.#messagingManager.onSocketDisconnectionCallback) {\n            this.#messagingManager.onSocketDisconnectionCallback(socketId)\n          }\n        }\n      })\n\n      if (this.#messagingManager.onSocketConnectionCallback) {\n        this.#messagingManager.onSocketConnectionCallback(socketId)\n      }\n    })\n  }\n\n  onSocketConnection (func) {\n    if (typeof func !== 'function') {\n      throw new Error(paramTypeErrors('onSocketConnection', ['function'], 'void'))\n    }\n\n    this.#messagingManager.onSocketConnectionCallback = func\n  }\n\n  onSocketDisconnection (func) {\n    if (typeof func !== 'function') {\n      throw new Error(paramTypeErrors('onSocketConnection', ['function'], 'void'))\n    }\n\n    this.#messagingManager.onSocketDisconnectionCallback = func\n  }\n\n  onMessage (func) {\n    if (typeof func !== 'function') {\n      throw new Error(paramTypeErrors('onSocketConnection', ['function'], 'void'))\n    }\n\n    this.#messagingManager.onMessageCallback = (data, socketId) => {\n      return new Promise((resolve, reject) => {\n        const { messageId, message } = data\n        const newMessage = func({ message, socketId })\n        resolve({ message: newMessage, messageId })\n      })\n    }\n  }\n\n  send (sockets = [], message) {\n    if (!Array.isArray(sockets)) {\n      throw new Error('The first param to synchemy.send must be an array of socket ids.')\n    }\n\n    sockets.forEach(socketId => {\n      const socket = this.#messagingManager.sockets[socketId]\n      if (socket && socket.send) {\n        socket.send(JSON.stringify({\n          message\n        }))\n      } else {\n        throw new Error('One of the socketIds you provided is invalid.')\n      }\n    })\n  }\n\n  sendAll (message) {\n    Object.values(this.#messagingManager.sockets).forEach(socket => {\n      socket.send(JSON.stringify({\n        message\n      }))\n    })\n  }\n}\n\nexport default SynchemyServer\n"],"file":"server.js"}