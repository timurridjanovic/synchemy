{"version":3,"sources":["../src/server.js"],"names":["SynchemyServer","app","server","port","options","sockets","onMessageCallback","onSocketConnectionCallback","onSocketDisconnectionCallback","Error","config","ws","WebSocket","Server","on","socket","socketId","push","data","parsedData","JSON","parse","then","message","messageId","send","stringify","_","otherSockets","Object","keys","func","Promise","resolve","reject","newMessage","Array","isArray","forEach","values"],"mappings":"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","sourcesContent":["import WebSocket from 'ws'\nimport { v4 as uuid } from 'uuid'\n\nclass SynchemyServer {\n  sockets = []\n  #messagingManager = {\n    sockets: {},\n    onMessageCallback: null,\n    onSocketConnectionCallback: null,\n    onSocketDisconnectionCallback: null\n  }\n\n  constructor ({ app, server, port, options = {} }) {\n    if (!server) {\n      throw new Error('The SynchemyServer constructor needs a server property.')\n    }\n\n    const config = port ? { port } : { server }\n    const ws = new WebSocket.Server({\n      ...config,\n      ...options\n    })\n\n    server.on('request', app)\n\n    ws.on('connection', socket => {\n      const socketId = uuid()\n      this.#messagingManager.sockets[socketId] = socket\n      this.sockets.push(socketId)\n\n      socket.on('message', data => {\n        const parsedData = JSON.parse(data)\n        if (this.#messagingManager.onMessageCallback) {\n          this.#messagingManager.onMessageCallback(parsedData, socketId).then(({ message, messageId }) => {\n            socket.send(JSON.stringify({\n              message, messageId\n            }))\n          })\n        }\n      })\n\n      socket.on('close', () => {\n        if (this.#messagingManager) {\n          const { [socketId]: _, ...otherSockets } = this.#messagingManager.sockets\n          this.#messagingManager.sockets = otherSockets\n          this.sockets = Object.keys(otherSockets)\n          if (this.#messagingManager.onSocketDisconnectionCallback) {\n            this.#messagingManager.onSocketDisconnectionCallback(socketId)\n          }\n        }\n      })\n\n      if (this.#messagingManager.onSocketConnectionCallback) {\n        this.#messagingManager.onSocketConnectionCallback(socketId)\n      }\n    })\n  }\n\n  onSocketConnection (func) {\n    this.#messagingManager.onSocketConnectionCallback = func\n  }\n\n  onSocketDisconnection (func) {\n    this.#messagingManager.onSocketDisconnectionCallback = func\n  }\n\n  onMessage (func) {\n    this.#messagingManager.onMessageCallback = (data, socketId) => {\n      return new Promise((resolve, reject) => {\n        const { messageId, message } = data\n        const newMessage = func({ message, socketId })\n        resolve({ message: newMessage, messageId })\n      })\n    }\n  }\n\n  send (sockets = [], message) {\n    if (!Array.isArray(sockets)) {\n      throw new Error('The first param to synchemy.send must be an array of socket ids.')\n    }\n\n    sockets.forEach(socketId => {\n      const socket = this.#messagingManager.sockets[socketId]\n      if (socket && socket.send) {\n        socket.send(JSON.stringify({\n          message\n        }))\n      } else {\n        throw new Error('One of the socketIds you provided is invalid.')\n      }\n    })\n  }\n\n  sendAll (message) {\n    Object.values(this.#messagingManager.sockets).forEach(socket => {\n      socket.send(JSON.stringify({\n        message\n      }))\n    })\n  }\n}\n\nexport default SynchemyServer\n"],"file":"server.js"}