{"version":3,"sources":["../src/server.js"],"names":["sockets","onEventCallback","SynchemyServer","app","server","options","ws","WebSocket","Server","on","socket","noop","heartbeat","isAlive","interval","setInterval","clients","forEach","client","terminate","ping","socketId","data","message","JSON","parse","then","result","type","messageId","send","stringify","clearInterval","_","otherSockets","func","Promise","resolve","reject","otherProps","synchemy"],"mappings":"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","sourcesContent":["import WebSocket from 'ws'\nimport { v4 as uuid } from 'uuid'\n\nlet sockets = {}\nlet onEventCallback\n\nclass SynchemyServer {\n  createConnection ({ app, server, options = {} }) {\n    const ws = new WebSocket.Server({\n      server,\n      ...options\n    })\n\n    server.on('request', app)\n\n    ws.on('connection', socket => {\n      const noop = () => {}\n      const heartbeat = () => {\n        this.isAlive = true\n      }\n      const interval = setInterval(() => {\n        ws.clients.forEach((client) => {\n          if (client.isAlive === false) {\n            return client.terminate()\n          }\n\n          client.isAlive = false\n          client.ping(noop)\n        })\n      }, 30000)\n      socket.isAlive = true\n      socket.on('pong', heartbeat)\n\n      const socketId = uuid()\n      sockets[socketId] = socket\n\n      socket.on('message', data => {\n        const message = JSON.parse(data)\n        if (onEventCallback) {\n          onEventCallback(message).then(({ result, type, messageId }) => {\n            socket.send(JSON.stringify({\n              result, type, messageId\n            }))\n          })\n        }\n      })\n\n      socket.on('close', function () {\n        clearInterval(interval)\n        const { [socketId]: _, ...otherSockets } = sockets\n        sockets = otherSockets\n      })\n    })\n  }\n\n  onEvent (func) {\n    onEventCallback = message => {\n      return new Promise((resolve, reject) => {\n        const { type, messageId, ...otherProps } = message\n        const result = func({ type, ...otherProps })\n        resolve({ result, type, messageId })\n      })\n    }\n  }\n}\n\nconst synchemy = new SynchemyServer()\nexport default synchemy\n"],"file":"server.js"}